// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // Look for yourkit.jar, which contains the probe APIs.
    if (!file(yourkitJar).exists()) {
        throw new InvalidUserDataException("""\
            File not found: ${yourkitJar}
            Please edit gradle.properties to point to a valid yourkit.jar file.\
        """.stripIndent())
    }

    compileOnly files(yourkitJar)
    compileOnly "com.google.code.java-allocation-instrumenter:java-allocation-instrumenter:3.1.0"
}

task jvmArgs {
    dependsOn 'assemble'

    doLast {
        def jvmArgs = []

        // Add the allocation instrumentation agent if -Pallocations argument used.
        if (project.hasProperty("allocations")) {
            logger.quiet("Note: using the allocation instrumentation agent (-Pallocations)")
            def allocationsAgent = configurations.compileOnly.find {
                it.name.contains("java-allocation-instrumenter")
            }
            jvmArgs << "-javaagent:${allocationsAgent}"
        }

        // Add the YourKit instrumentation agent.
        def agent = file(yourkitAgent)
        if (!agent.exists()) {
            throw new InvalidUserDataException("""\
                File not found: ${agent}
                Please edit gradle.properties to point to a valid YourKit agent.\
            """.stripIndent())
        }
        def agentArgs = [
            "disableall", // Disables all built-in YourKit instrumentation.
            "probebootclasspath=${project.jar.outputs.files.getFiles().first()}",
            "probe_on=com.android.tools.probes.LintDetectorStats"
        ]
        jvmArgs << "-agentpath:${agent}=${agentArgs.join(',')}"

        // Print out results.
        println """
***********************************************************************************
Please use the following JVM arguments to instrument a Lint invocation from Gradle.
Be careful to quote the arguments as needed.

${jvmArgs.join('\n\n')}

Instrumentation results will be printed to console after the Lint analysis is done.
***********************************************************************************
"""
    }
}
